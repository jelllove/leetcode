class Solution {
public:
    double myPow(double x, long n) {
        if (n == 0)
            return 1;
        
        if (n == 1)
            return x;
        
        //如果N次方的时候，如果N是负数的话，要把N先转成，然后再把X被除以1;
        if (n < 0)
        {
            x = 1.0 / x;
            n = -n;
        }
        
        //然后下一次就是把它一分为2来做了，一直到这上tmp被分成0为止，这时就会返回1
        //比如2^8，可以看成是  2^4 * 2^4,  然后再分下去就是    (2^2 * 2^2 ) * (2^2 * 2^2), 最后就是 （(2^1 *2^1）* (2^1 *2^1）) * （(2^1 *2^1）* (2^1 *2^1）)
        //所以只要做3次，就可以算出2^8，要不然的话，要一直做8次
        double tmp = myPow(x, n/2);
        
        if (n % 2 == 0)
        {
            return tmp * tmp;
        }
        else
        {
            //这里为什么要对奇数做一个处理，原因是因为 可以看成这样   3^5 = (3 ^ 2) * (3 ^ 2) * 3 = (9) * (9) * 3;
            return tmp * tmp * x;
        }
        
        
    }
};